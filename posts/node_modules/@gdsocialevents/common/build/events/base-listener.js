"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//abstract: subclass needs to define, private: subclass cannot change, protected: subclass can define if it wants to
//<T extends Event>: Listener becomes a "generic class", we have to provide a custom type T to it
var Listener = /** @class */ (function () {
    function Listener(client) {
        this.ackWait = 5 * 1000; //5s
        this.client = client;
    }
    Listener.prototype.subscriptionOptions = function () {
        return this.client
            .subscriptionOptions()
            .setManualAckMode(true) //when an event is received, do not automatically tell the nats server that we processed the event --> we need to acknowledge the event manually!
            .setAckWait(this.ackWait)
            .setDeliverAllAvailable() //whenever our subscription is created ((re)start a listener), nats server will send all the events that have been emitted before this subscription was created for the **first time only** (because all the events emitted at this stage will be unprocessed)!
            .setDurableName(this.queueGroupName); //durable name/id: for the second/third/etc recreation, only fetch the events that have "unprocessed" flag -- as opposed to setDeliverAll, don't fetch every single event everytime we re-start the subscription.
    };
    Listener.prototype.listen = function () {
        var _this = this;
        //subscribe to channel(s) {subject = name of the channel}
        var subscription = this.client.subscribe(this.subject, this.queueGroupName, this.subscriptionOptions());
        subscription.on('message', function (msg) {
            console.log("Message received from channel: " + _this.subject + " / " + _this.queueGroupName);
            var parsedData = _this.parseMessage(msg);
            _this.onMessage(parsedData, msg);
        });
    };
    Listener.prototype.parseMessage = function (msg) {
        var data = msg.getData();
        return typeof data === 'string'
            ? JSON.parse(data)
            : JSON.parse(data.toString('utf8'));
    };
    return Listener;
}());
exports.Listener = Listener;
